$ A simple math eval in crex $
fn isnum(str){
   if(str=="0"){
      return true;
   }
   if(str=="1"){
      return true;
   }
   if(str=="2"){
      return true;
   }
   if(str=="3"){
      return true;
   }
   if(str=="4"){
      return true;
   }
   if(str=="5"){
      return true;
   }
   if(str=="6"){
      return true;
   }
   if(str=="7"){
      return true;
   }
   if(str=="8"){
      return true;
   }
   if(str=="9"){
      return true;
   }
   return false;
}
fn maketoken(type,value){
   token = [];
   append(token,type);
   append(token,value);
   return token;
}
fn tokenize(code){
   i = 0;
   tokens = [];
   while(i<len(code)&&i!=len(code)){
      if(i!=len(code)&&code[i]=="+"){
         append(tokens,maketoken("+",null));
         i = i+1;
      }
      if(i!=len(code)&&code[i]=="*"){
         append(tokens,maketoken("*",null));
         i = i+1;
      }
      if(i!=len(code)&&code[i]=="-"){
         append(tokens,maketoken("-",null));
         i = i+1;
      }
      if(i!=len(code)&&code[i]=="/"){
         append(tokens,maketoken("/",null));
         i = i+1;
      }
      if(i!=len(code)&&isnum(code[i])){
         
         str = code[i];
         i = i+1;
         while(i!=len(code)&&isnum(code[i])){
            str = str+code[i];
            i = i+1;
         }

         append(tokens,maketoken("number",str));
      }
      
      else{
         cout("Lexical error, unexpected symbol: ",code[i]);
         exit();
      }
      

   }
   append(tokens,maketoken("EOF",null));
   return tokens;
}


$ AST DATA STRUCT $

fn makeast(type,node){
   ast = [];
   append(ast,type);
   append(ast,node);
   return ast;
}
fn numbernode(number){
   numnode = [];
   append(numnode,number);
   return makeast("number",numnode);
}
fn unarynode(op,node){
   unarynode = [];
   append(unarynode,op);
   append(unarynode,node);
   return makeast("unary",unarynode);
}
fn binop(left,op,right){
   binopnode = [];
   append(binopnode,left);
   append(binopnode,op);
   append(binopnode,right);
   return makeast("binop",binopnode);
}


$ Parser $

tokenslist = [];
tokenindex = [0];

fn peek(){
   return tokenslist[0][tokenindex[0]];
}
fn previous(){
   return tokenslist[0][tokenindex[0]-1];
}
fn isatend(){
   return peek()[0] == "EOF";
}
fn match(tokentype){
   if(!(isatend())&&peek()[0]==tokentype){
      tokenindex[0] = tokenindex[0]+1;
      return true;
   }
   return false;
}
fn primary(){
   if(match("number")){
     
      return numbernode(int(previous()[1]));
   }
}
fn unary(){
   if(match("-")){
      left = primary();
      return unarynode("-",left); 
   }
   else{
      return primary();
   }
}
fn factor(){
   left = unary();
   while(match("*")||match("/")){
      op = previous()[0];
      right = unary();
     
      left = binop(left,op,right);
   }
   return left;  
   
}
fn term(){
   left = factor();
   while(match("+")||match("-")){
      op = previous()[0];
      right = factor();
      
      left = binop(left,op,right);
   }
   return left;
}
fn parse(tokens){

   append(tokenslist,tokens);
   return term();
}

$ EVAL/INTERPRETER $
fn unaryeval(ast){
   if (ast[1][0]=="-"){
      return -evaluate(ast[1][1]);
   }
}
fn number(ast){
   return ast[1][0];
}

fn binopeval(ast){
   left = evaluate(ast[1][0]);
   right = evaluate(ast[1][2]);
   
   if(ast[1][1]=="+"){
      return (left)+(right);
   }
   if(ast[1][1]=="*"){
       return (left)*(right);
   }
   if(ast[1][1]=="-"){
       return (left-right);
   }
   if(ast[1][1]=="/"){
       return (left/right);
   }
}
fn evaluate(ast){
   if(ast[0]=="number"){
     return number(ast);
   }
   if(ast[0]=="unary"){
      return unaryeval(ast);
   }
   if(ast[0]=="binop"){
      
     return binopeval(ast);
   }
}
cout("Enter the expression:");
cout(evaluate(parse(tokenize(cin()))));


